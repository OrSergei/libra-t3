// prisma-libra/seed/seed.ts
import { PrismaClient, LoanStatus } from '@prisma/client';

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: "postgresql://postgres:postgres@localhost:5432/libra_db"
    }
  }
});

async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...');
  console.log('üìä –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }

  // 1. –ö–Ω–∏–≥–∏
  console.log('üìö –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥–∏...');
  const books = await prisma.book.createMany({
    data: [
      { title: '–ö–Ω–∏–≥–∞ 1', author: '–ê–≤—Ç–æ—Ä 1', year: 2025, description: '–û–ø–∏—Å–∞–Ω–∏–µ 1' },
      { title: '–ö–Ω–∏–≥–∞ 2', author: '–ê–≤—Ç–æ—Ä 2', year: 2025, description: '–û–ø–∏—Å–∞–Ω–∏–µ 2' },
      { title: '–ö–Ω–∏–≥–∞ 3', author: '–ê–≤—Ç–æ—Ä 3', year: 2025, description: '–û–ø–∏—Å–∞–Ω–∏–µ 3' },
      { title: '–ö–Ω–∏–≥–∞ 4', author: '–ê–≤—Ç–æ—Ä 4', year: 2025, description: '–û–ø–∏—Å–∞–Ω–∏–µ 4' },
      { title: '–ö–Ω–∏–≥–∞ 5', author: '–ê–≤—Ç–æ—Ä 5', year: 2025, description: '–û–ø–∏—Å–∞–Ω–∏–µ 5' },
      { title: '–ö–Ω–∏–≥–∞ 6', author: '–ê–≤—Ç–æ—Ä 6', year: 2025, description: '–û–ø–∏—Å–∞–Ω–∏–µ 6' },
      { title: '–ö–Ω–∏–≥–∞ 7', author: '–ê–≤—Ç–æ—Ä 7', year: 2025, description: '–û–ø–∏—Å–∞–Ω–∏–µ 7' }
    ],
    skipDuplicates: true
  });
  const allBooks = await prisma.book.findMany();

  console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${books.count} –∫–Ω–∏–≥`);

  // 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  console.log('üë• –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  const users = await prisma.user.createMany({
    data: [
      { name: '–ê–ª–∏—Å–∞', email: 'alice@example.com', password: 'password1' },
      { name: '–ë–æ–±', email: 'bob@example.com', password: 'password2' },
      { name: '–ß–∞—Ä–ª–∏', email: 'charlie@example.com', password: 'password3' }
    ],
    skipDuplicates: true
  });
  const allUsers = await prisma.user.findMany();

  console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${users.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

  // 3. –û—Ç–∑—ã–≤—ã: 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí 1 –æ—Ç–∑—ã–≤ –Ω–∞ 1 –∫–Ω–∏–≥—É
  const sampleReviews = [];

  for (const book of allBooks.slice(0, 5)) {
    for (const user of allUsers.slice(0, 2)) {
      sampleReviews.push({
        bookId: book.id,
        userId: user.id,
        rating: Math.floor(Math.random() * 3) + 3, // –æ—Ç 3 –¥–æ 5
        comment: `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç ${user.name} –∫ –∫–Ω–∏–≥–µ "${book.title}"`
      });
    }
  }

  await prisma.review.createMany({
    data: sampleReviews,
    skipDuplicates: true
  });

  console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${sampleReviews.length} –æ—Ç–∑—ã–≤–æ–≤`);

  // 4. –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–π–º–æ–≤
  console.log('üìö –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏...');
  const overdueBooks = await prisma.book.createMany({
    data: [
      { 
        title: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ 1', 
        author: '–ê–≤—Ç–æ—Ä –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π', 
        year: 2023, 
        description: '–≠—Ç–∞ –∫–Ω–∏–≥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –¥–∞–≤–Ω–æ' 
      },
      { 
        title: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ 2', 
        author: '–ê–≤—Ç–æ—Ä –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π', 
        year: 2023, 
        description: '–≠—Ç–∞ –∫–Ω–∏–≥–∞ —Ç–æ–∂–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞' 
      },
      { 
        title: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ 3', 
        author: '–ê–≤—Ç–æ—Ä –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π', 
        year: 2023, 
        description: '–ï—â–µ –æ–¥–Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞' 
      },
      { 
        title: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ 4', 
        author: '–ê–≤—Ç–æ—Ä –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π', 
        year: 2023, 
        description: '–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞' 
      }
    ],
    skipDuplicates: true
  });

  const overdueBooksList = await prisma.book.findMany({
    where: {
      title: {
        startsWith: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞'
      }
    }
  });

  // 5. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥–∞–º–∏
  const overdueUsers = await prisma.user.createMany({
    data: [
      { 
        name: '–ò–≤–∞–Ω –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π', 
        email: 'ivan.overdue@example.com', 
        password: 'password4' 
      },
      { 
        name: '–ú–∞—Ä–∏—è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è', 
        email: 'maria.overdue@example.com', 
        password: 'password5' 
      }
    ],
    skipDuplicates: true
  });

  const overdueUsersList = await prisma.user.findMany({
    where: {
      email: {
        in: ['ivan.overdue@example.com', 'maria.overdue@example.com']
      }
    }
  });

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–π–º—ã –¥–ª—è —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const overdueLoans = [];
  const thirtyDaysAgo = new Date();
  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

  for (const user of overdueUsersList) {
    // –ë–µ—Ä–µ–º –ø–æ –¥–≤–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userOverdueBooks = overdueBooksList.slice(0, 2);
    overdueBooksList.splice(0, 2); // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
    
    for (const book of userOverdueBooks) {
      overdueLoans.push({
        bookId: book.id,
        userId: user.id,
        loanDate: thirtyDaysAgo,
        dueDate: new Date(thirtyDaysAgo.getTime() - 7 * 24 * 60 * 60 * 1000), // 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        status: LoanStatus.OVERDUE
      });
    }
  }

  await prisma.loan.createMany({
    data: overdueLoans,
    skipDuplicates: true
  });

  console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
}

main()
  .catch(e => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

    /*
  D:\PP\libra-t3\libra\src\server\api\rooters
  —Å–ø–µ—Ä–≤–∞ —Å–æ–∑–¥–∞—Ç—å —Ä–æ—É—Ç–µ—Ä 
  –ø–µ—Ä–µ–¥–∞—Ç—å –≤ root 


  —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å —Å–µ—Ä–≤–µ–Ω–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Å–µ—Å–∏—è 

  –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—é—Ç—Å—è –º—É—Ç–∞—Ü–∏—è 

  –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–∂–Ω–æ –∏ qeury 
  
  
  */