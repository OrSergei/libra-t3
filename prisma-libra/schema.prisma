// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id          Int      @id @default(autoincrement())
  title       String
  author      String
  isbn        String?  @unique
  year        Int?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  loans       Loan[]
  reviews     Review[]
  
  @@index([title])
  @@index([author])
}

model Reader {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  loans     Loan[]
  reviews   Review[]
  
  @@map("users") // Для совместимости с NextAuth
}

model Loan {
  id        Int      @id @default(autoincrement())
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  reader    Reader   @relation(fields: [readerId], references: [id])
  readerId  String
  loanDate  DateTime @default(now())
  dueDate   DateTime
  returnDate DateTime?
  status    LoanStatus @default(ACTIVE)
  fine      Int      @default(0) // Штраф за просрочку
  
  @@index([bookId])
  @@index([readerId])
}

model Review {
  id        Int      @id @default(autoincrement())
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  reader    Reader   @relation(fields: [readerId], references: [id])
  readerId  String
  rating    Int      // Оценка от 1 до 5 (валидация будет в коде приложения)
  comment   String?
  createdAt DateTime @default(now())
  
  @@index([bookId])
}

enum LoanStatus {
  ACTIVE
  RETURNED
  OVERDUE
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  @@map("readers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}