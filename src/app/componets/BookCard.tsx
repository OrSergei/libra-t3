'use client';

import { useRouter } from 'next/navigation';
import { useState } from 'react';
import { api } from '~/trpc/react'; 
import { ReviewBook } from './ReviewBook';
import Link from 'next/link';
import { UserRole } from '@prisma/client';

type Book = {
  id: number;
  title: string;
  author: string;
  year?: number | null;
  description?: string | null;
};

export function BookCard({ role, book,  refetch }: { role: UserRole, book: Book; refetch: () => void }) {

  const [isReview, setIsReview] = useState(false);

    const [error, setError] = useState<string | null>(null);

  const router = useRouter();
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({
    id: book.id,
    title: book.title,
    author: book.author,
    year: book.year || null ,
    description: book.description || ''
  });


const createMutation = api.loan.create.useMutation({
  onSuccess: () => {
    alert('–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!');
    refetch();
    
  },
  onError: (err) => { 
    setError(err.message);
    
  },
  
});

const deleteMutation = api.book.delete.useMutation({
  onSuccess: () => {
    alert('–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞!');
    refetch();
  },
  onError: (err) => { 
    setError(err.message);
    
  },
  
});

const updateMutation = api.book.update.useMutation({
  onSuccess: () => {
    alert('–ö–Ω–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    refetch();
  },
  onError: (err) => { 
    setError(err.message);
    
  },
  
});

const handleAddReview = () => {
  setIsReview(!isReview);

};


  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
  const handleDelete = async () => {
    setError(null);
    await deleteMutation.mutateAsync({ id: formData.id });
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
  const handleEditSubmit = async (e: React.FormEvent) => {
    e.preventDefault(); // –í–∞–∂–Ω–æ: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setError(null);
    try {
      await updateMutation.mutateAsync(formData);
      setIsEditing(false); // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:", error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–∏–≥—É");
    }
  };

  // –í–∑—è—Ç—å –∫–Ω–∏–≥—É
  const handleBorrow = async () => {
    setError(null);
    await createMutation.mutateAsync({ id: formData.id });
    
  };

  return (
    <div className="rounded-lg border border-gray-200 bg-white p-6 shadow-sm hover:shadow-md transition-all relative">
      {error && <p className="text-red-500">{error}</p>}

      { role == UserRole.LIBRARIAN &&
        <div className="absolute top-2 right-2 flex gap-2">
          <button
            onClick={() => setIsEditing(!isEditing)}
            className="text-blue-500 hover:text-blue-700"
            title={isEditing ? "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" : "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É"}
          >
            {isEditing ? '‚ùå' : '‚úèÔ∏è'}
          </button>
          <button
            onClick={handleDelete}
            className="text-red-500 hover:text-red-700"
            title="–£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É"
          >
            üóëÔ∏è
          </button>
        </div>
      }
      

      

      {isEditing ? (
        <form onSubmit={handleEditSubmit} className="space-y-3">
          <input
            type="text"
            value={formData.title}
            onChange={(e) => setFormData({...formData, title: e.target.value})}
            className="w-full border p-2 rounded"
            required
          />
          <input
            type="text"
            value={formData.author}
            onChange={(e) => setFormData({...formData, author: e.target.value})}
            className="w-full border p-2 rounded"
            required
          />
         <input
            type="number"
            value={formData.year ?? ''} 
            onChange={(e) => setFormData({
              ...formData, 
              year: e.target.value ? parseInt(e.target.value) : null
            })}
            className="w-full border p-2 rounded"
            placeholder="–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è"
          />    
          <textarea
            value={formData.description}
            onChange={(e) => setFormData({...formData, description: e.target.value})}
            className="w-full border p-2 rounded"
            placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
          />
          <button
            type="submit"
            className="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600"
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
         
        </form>
      ) : (
        <>
          <h4 className="text-lg font-bold text-gray-900 mb-2">{book.title}</h4>
          <p className="text-gray-700">–ê–≤—Ç–æ—Ä: {book.author}</p>
          {book.year && <p className="text-gray-700">–ì–æ–¥: {book.year}</p>}
          {book.description && <p className="mt-2 text-gray-600">{book.description}</p>}

          {/* {!isLibrarian && ( */}
            <button
              onClick={handleBorrow}
              className="mt-4 w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
            >
              –í–∑—è—Ç—å –∫–Ω–∏–≥—É
            </button>
       
        </>
        
      )}

     <button onClick={() => router.push (`/books/${book.id}`) } className="mt-4 w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700">

         –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã
        </button>
                
      <button
      onClick={handleAddReview} className="mt-4 w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700">

        { isReview ?   '—Å–∫—Ä—ã—Ç—å –æ—Ç–∑—ã–≤': '–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ' }
      
      </button>
    
      {  isReview && 
        <ReviewBook bookId={book.id} />
      
      }

  
         
 
    </div>
    
  );
}